from collections import deque
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
initial_state = [[1, 2, 3], [5, 6, 8], [4, 7, 0]]
def find_number(board, num):
    for row in range(3):
        for col in range(3):
            if board[row][col] == num:
                return row, col
def swap_tiles(board, row1, col1, row2, col2):
    board[row1][col1], board[row2][col2] = board[row2][col2], board[row1][col1]
def print_board(board):
    for row in board:
        print(' '.join(map(str, row)))
def solve_puzzle(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set(tuple(map(tuple, initial_state)))
    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path
        zero_row, zero_col = find_number(current_state, 0)
        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            new_row, new_col = zero_row + dr, zero_col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [list(row) for row in current_state]
                swap_tiles(new_state, zero_row, zero_col, new_row, new_col)
                if tuple(map(tuple, new_state)) not in visited:
                    new_path = path + [(new_row, new_col)]
                    queue.append((new_state, new_path))
                    visited.add(tuple(map(tuple, new_state)))
solution_path = solve_puzzle(initial_state, goal_state)
if solution_path:
    print("Solution Path:")
    print("Initial State:")
    print_board(initial_state)
    for step, (row, col) in enumerate(solution_path):
        print(f"Step {step+1}:")
        swap_tiles(initial_state, row, col, find_number(initial_state, 0)[0], find_number(initial_state, 0)[1])
        print_board(initial_state)
        print()
else:
    print("No solution found.")
