from collections import deque
def water_jug_problem(capacity_a, capacity_b, target):
    visited = set()
    queue = deque([(0, 0)])
    while queue:
        current_state = queue.popleft()
        a, b = current_state
        if a == target or b == target:
            return current_state
        if a < capacity_a:
            new_state = (capacity_a, b)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
        if b < capacity_b:
            new_state = (a, capacity_b)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
        if a > 0:
            new_state = (0, b)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
        if b > 0:
            new_state = (a, 0)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
        if a > 0 and b < capacity_b:
            pour_amount = min(a, capacity_b - b)
            new_state = (a - pour_amount, b + pour_amount)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
        if b > 0 and a < capacity_a:
            pour_amount = min(b, capacity_a - a)
            new_state = (a + pour_amount, b - pour_amount)
            if new_state not in visited:
                visited.add(new_state)
                queue.append(new_state)
    return None
capacity_a = 4
capacity_b = 3
target = 2
result = water_jug_problem(capacity_a, capacity_b, target)
if result:
    print(f"Solution found: ({result[0]}, {result[1]})")
else:
    print("No solution found.")
